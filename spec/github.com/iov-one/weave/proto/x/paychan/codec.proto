syntax = "proto3";

package paychan;

import "codec.proto";
import "coin/codec.proto";
import "crypto/models.proto";

// PaymentChannel holds the state of a payment channel during its lifetime.
message PaymentChannel {
  weave.Metadata metadata = 1;
  // Sender is the source that the founds are allocated from.
  bytes src = 2 ;
  // Sender public key is a key that must be used to verify signature of
  // transfer message. Sender creates signed transfer messages and gives them
  // to the recipient. Signature prevents from altering transfer message.
  crypto.PublicKey sender_pubkey = 3;
  // Recipient is the party that receives payments through this channel
  bytes recipient = 4 ;
  // Total represents a maximum value that can be transferred via this
  // payment channel.
  coin.Coin total = 5;
  // Timeout represents wall clock time as read from the block header. Timeout
  // is represented using POSIX time format.
  // Expiration time is inclusive meaning that the paychan expires as soon as
  // the current time is equal or greater than timeout value.
  // nonexpired: ;
  // Max length 128 character.
  string memo = 7;
  // Transferred represents total amount that was transferred using allocated
  // (total) value. Transferred must never exceed total value.
  coin.Coin transferred = 8;
}

// CreatePaymentChannelMsg creates a new payment channel that can be used to
// transfer value between two parties.
//
// Total amount will be taken from the senders account and allocated for user
// in the transactions done via created payment channel.
message CreatePaymentChannelMsg {
  weave.Metadata metadata = 1;
  // Sender address (weave.Address).
  bytes src = 2 ;
  // Sender public key is for validating transfer message signature.
  crypto.PublicKey sender_pubkey = 3;
  // Recipient address  (weave.Address).
  bytes recipient = 4 ;
  // Maximum amount that can be transferred via this channel.
  coin.Coin total = 5;
  // If reached, channel can be closed by anyone.
  int64 timeout = 6 ;
  // Max length 128 character.
  string memo = 7;
}

// Payment is created by the sender. Sender should give the message to the
// recipient, so that it can be redeemed at any time.
//
// Each Payment should be created with amount greater than the previous one.
message Payment {
  string chain_id = 1 ;
  bytes channel_id = 2 ;
  coin.Coin amount = 3;
  // Max length 128 character.
  string memo = 4;
}

// TransferPaymentChannelMsg binds Payment with a signature created using
// senders private key.
// Signature is there to ensure that payment message was not altered.
message TransferPaymentChannelMsg {
  weave.Metadata metadata = 1;
  Payment payment = 2;
  crypto.Signature signature = 3;
}

// ClosePaymentChannelMsg close a payment channel and release remaining founds
// by sending them back to the sender account.
//
// Recipient account can close channel at any moment.
//
// Sender can close channel only if the timeout was reached.
message ClosePaymentChannelMsg {
  weave.Metadata metadata = 1;
  bytes channel_id = 2 ;
  // Max length 128 character.
  string memo = 3;
}
