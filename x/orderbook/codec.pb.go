// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/orderbook/codec.proto

package orderbook

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_iov_one_weave "github.com/iov-one/weave"
	weave "github.com/iov-one/weave"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type OrderState int32

const (
	OrderState_Invalid OrderState = 0
	OrderState_Wait    OrderState = 1
	OrderState_Done    OrderState = 2
	OrderState_Cancel  OrderState = 3
)

var OrderState_name = map[int32]string{
	0: "ORDER_STATE_INVALID",
	1: "ORDER_STATE_WAIT",
	2: "ORDER_STATE_DONE",
	3: "ORDER_STATE_CANCEL",
}

var OrderState_value = map[string]int32{
	"ORDER_STATE_INVALID": 0,
	"ORDER_STATE_WAIT":    1,
	"ORDER_STATE_DONE":    2,
	"ORDER_STATE_CANCEL":  3,
}

func (x OrderState) String() string {
	return proto.EnumName(OrderState_name, int32(x))
}

func (OrderState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_492308ae36fa08c1, []int{0}
}

type Side int32

const (
	Side_Invalid Side = 0
	Side_Ask     Side = 1
	Side_Bid     Side = 2
)

var Side_name = map[int32]string{
	0: "SIDE_INVALID",
	1: "SIDE_ASK",
	2: "SIDE_BID",
}

var Side_value = map[string]int32{
	"SIDE_INVALID": 0,
	"SIDE_ASK":     1,
	"SIDE_BID":     2,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}

func (Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_492308ae36fa08c1, []int{1}
}

type Amount struct {
	// Whole coins, -10^15 < integer < 10^15
	Whole int64 `protobuf:"varint,1,opt,name=whole,proto3" json:"whole,omitempty"`
	// Billionth of coins. 0 <= abs(fractional) < 10^9
	// If fractional != 0, must have same sign as integer
	Fractional int64 `protobuf:"varint,2,opt,name=fractional,proto3" json:"fractional,omitempty"`
}

func (m *Amount) Reset()         { *m = Amount{} }
func (m *Amount) String() string { return proto.CompactTextString(m) }
func (*Amount) ProtoMessage()    {}
func (*Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_492308ae36fa08c1, []int{0}
}
func (m *Amount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Amount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amount.Merge(m, src)
}
func (m *Amount) XXX_Size() int {
	return m.Size()
}
func (m *Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_Amount proto.InternalMessageInfo

func (m *Amount) GetWhole() int64 {
	if m != nil {
		return m.Whole
	}
	return 0
}

func (m *Amount) GetFractional() int64 {
	if m != nil {
		return m.Fractional
	}
	return 0
}

type Order struct {
	// Unique identifier of order
	OrderID []byte `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Unique identifier of maker that created order
	MakerId    github_com_iov_one_weave.Address `protobuf:"bytes,2,opt,name=maker_id,json=makerId,proto3,casttype=github.com/iov-one/weave.Address" json:"maker_id,omitempty"`
	Market     *Market                          `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Side       Side                             `protobuf:"varint,4,opt,name=side,proto3,enum=orderbook.Side" json:"side,omitempty"`
	OrderState OrderState                       `protobuf:"varint,5,opt,name=order_state,json=orderState,proto3,enum=orderbook.OrderState" json:"order_state,omitempty"`
	// The amount maker want to sell/buy
	OriginVolume int64 `protobuf:"varint,6,opt,name=origin_volume,json=originVolume,proto3" json:"origin_volume,omitempty"`
	// Remaning volume. (This part enables partially filled orders)
	RemainingVolume int64 `protobuf:"varint,7,opt,name=remaining_volume,json=remainingVolume,proto3" json:"remaining_volume,omitempty"`
	// Executed (Fullfiled) volume. origin_volume = executed_volume + remaining_volume
	ExecutedVolume int64 `protobuf:"varint,8,opt,name=executed_volume,json=executedVolume,proto3" json:"executed_volume,omitempty"`
	// Price for each unit
	Price *Amount `protobuf:"bytes,9,opt,name=price,proto3" json:"price,omitempty"`
	// Executed trades
	Trades []*Trade `protobuf:"bytes,10,rep,name=trades,proto3" json:"trades,omitempty"`
	// Count of executed trade
	TradesCount int64 `protobuf:"varint,11,opt,name=trades_count,json=tradesCount,proto3" json:"trades_count,omitempty"`
	// created_at defines create time of an order
	CreatedAt github_com_iov_one_weave.UnixTime `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3,casttype=github.com/iov-one/weave.UnixTime" json:"created_at,omitempty"`
	// updated_at defines update time of an order
	UpdatedAt github_com_iov_one_weave.UnixTime `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3,casttype=github.com/iov-one/weave.UnixTime" json:"updated_at,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_492308ae36fa08c1, []int{1}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetOrderID() []byte {
	if m != nil {
		return m.OrderID
	}
	return nil
}

func (m *Order) GetMakerId() github_com_iov_one_weave.Address {
	if m != nil {
		return m.MakerId
	}
	return nil
}

func (m *Order) GetMarket() *Market {
	if m != nil {
		return m.Market
	}
	return nil
}

func (m *Order) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_Invalid
}

func (m *Order) GetOrderState() OrderState {
	if m != nil {
		return m.OrderState
	}
	return OrderState_Invalid
}

func (m *Order) GetOriginVolume() int64 {
	if m != nil {
		return m.OriginVolume
	}
	return 0
}

func (m *Order) GetRemainingVolume() int64 {
	if m != nil {
		return m.RemainingVolume
	}
	return 0
}

func (m *Order) GetExecutedVolume() int64 {
	if m != nil {
		return m.ExecutedVolume
	}
	return 0
}

func (m *Order) GetPrice() *Amount {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Order) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

func (m *Order) GetTradesCount() int64 {
	if m != nil {
		return m.TradesCount
	}
	return 0
}

func (m *Order) GetCreatedAt() github_com_iov_one_weave.UnixTime {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Order) GetUpdatedAt() github_com_iov_one_weave.UnixTime {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

// Trade is a settled partial/full order
type Trade struct {
	Metadata *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	TradeId  []byte          `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Market   *Market         `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Order    *Order          `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	// Unique identifier of taker
	TakerId github_com_iov_one_weave.Address `protobuf:"bytes,5,opt,name=taker_id,json=takerId,proto3,casttype=github.com/iov-one/weave.Address" json:"taker_id,omitempty"`
	// Unique identifier of maker
	MakerId github_com_iov_one_weave.Address `protobuf:"bytes,6,opt,name=maker_id,json=makerId,proto3,casttype=github.com/iov-one/weave.Address" json:"maker_id,omitempty"`
	Volume  int64                            `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`
	Price   *Amount                          `protobuf:"bytes,8,opt,name=price,proto3" json:"price,omitempty"`
	// executed_at defines execution time of an order
	ExecutedAt github_com_iov_one_weave.UnixTime `protobuf:"varint,9,opt,name=executed_at,json=executedAt,proto3,casttype=github.com/iov-one/weave.UnixTime" json:"executed_at,omitempty"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_492308ae36fa08c1, []int{2}
}
func (m *Trade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return m.Size()
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Trade) GetTradeId() []byte {
	if m != nil {
		return m.TradeId
	}
	return nil
}

func (m *Trade) GetMarket() *Market {
	if m != nil {
		return m.Market
	}
	return nil
}

func (m *Trade) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *Trade) GetTakerId() github_com_iov_one_weave.Address {
	if m != nil {
		return m.TakerId
	}
	return nil
}

func (m *Trade) GetMakerId() github_com_iov_one_weave.Address {
	if m != nil {
		return m.MakerId
	}
	return nil
}

func (m *Trade) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Trade) GetPrice() *Amount {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Trade) GetExecutedAt() github_com_iov_one_weave.UnixTime {
	if m != nil {
		return m.ExecutedAt
	}
	return 0
}

type OrderBook struct {
	Metadata *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Unique identifier of orderbook
	OrderBookID   []byte   `protobuf:"bytes,2,opt,name=orderbook_id,json=orderbookId,proto3" json:"orderbook_id,omitempty"`
	Market        *Market  `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Side          Side     `protobuf:"varint,4,opt,name=side,proto3,enum=orderbook.Side" json:"side,omitempty"`
	AskOrders     []*Order `protobuf:"bytes,5,rep,name=ask_orders,json=askOrders,proto3" json:"ask_orders,omitempty"`
	TotalAskCount int64    `protobuf:"varint,6,opt,name=total_ask_count,json=totalAskCount,proto3" json:"total_ask_count,omitempty"`
	BidOrders     []*Order `protobuf:"bytes,7,rep,name=bid_orders,json=bidOrders,proto3" json:"bid_orders,omitempty"`
	TotalBidCount int64    `protobuf:"varint,8,opt,name=total_bid_count,json=totalBidCount,proto3" json:"total_bid_count,omitempty"`
}

func (m *OrderBook) Reset()         { *m = OrderBook{} }
func (m *OrderBook) String() string { return proto.CompactTextString(m) }
func (*OrderBook) ProtoMessage()    {}
func (*OrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_492308ae36fa08c1, []int{3}
}
func (m *OrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBook.Merge(m, src)
}
func (m *OrderBook) XXX_Size() int {
	return m.Size()
}
func (m *OrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBook proto.InternalMessageInfo

func (m *OrderBook) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *OrderBook) GetOrderBookID() []byte {
	if m != nil {
		return m.OrderBookID
	}
	return nil
}

func (m *OrderBook) GetMarket() *Market {
	if m != nil {
		return m.Market
	}
	return nil
}

func (m *OrderBook) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_Invalid
}

func (m *OrderBook) GetAskOrders() []*Order {
	if m != nil {
		return m.AskOrders
	}
	return nil
}

func (m *OrderBook) GetTotalAskCount() int64 {
	if m != nil {
		return m.TotalAskCount
	}
	return 0
}

func (m *OrderBook) GetBidOrders() []*Order {
	if m != nil {
		return m.BidOrders
	}
	return nil
}

func (m *OrderBook) GetTotalBidCount() int64 {
	if m != nil {
		return m.TotalBidCount
	}
	return 0
}

type Market struct {
	Metadata *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MarketID []byte          `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Market name
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AskTicker string `protobuf:"bytes,4,opt,name=ask_ticker,json=askTicker,proto3" json:"ask_ticker,omitempty"`
	BidTicker string `protobuf:"bytes,5,opt,name=bid_ticker,json=bidTicker,proto3" json:"bid_ticker,omitempty"`
}

func (m *Market) Reset()         { *m = Market{} }
func (m *Market) String() string { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()    {}
func (*Market) Descriptor() ([]byte, []int) {
	return fileDescriptor_492308ae36fa08c1, []int{4}
}
func (m *Market) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Market) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Market.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Market) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Market.Merge(m, src)
}
func (m *Market) XXX_Size() int {
	return m.Size()
}
func (m *Market) XXX_DiscardUnknown() {
	xxx_messageInfo_Market.DiscardUnknown(m)
}

var xxx_messageInfo_Market proto.InternalMessageInfo

func (m *Market) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Market) GetMarketID() []byte {
	if m != nil {
		return m.MarketID
	}
	return nil
}

func (m *Market) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Market) GetAskTicker() string {
	if m != nil {
		return m.AskTicker
	}
	return ""
}

func (m *Market) GetBidTicker() string {
	if m != nil {
		return m.BidTicker
	}
	return ""
}

type PostOrderMsg struct {
	Metadata  *weave.Metadata                   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	OrderID   []byte                            `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Volume    int64                             `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	Price     *Amount                           `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	Side      Side                              `protobuf:"varint,5,opt,name=side,proto3,enum=orderbook.Side" json:"side,omitempty"`
	Timestamp github_com_iov_one_weave.UnixTime `protobuf:"varint,6,opt,name=timestamp,proto3,casttype=github.com/iov-one/weave.UnixTime" json:"timestamp,omitempty"`
}

func (m *PostOrderMsg) Reset()         { *m = PostOrderMsg{} }
func (m *PostOrderMsg) String() string { return proto.CompactTextString(m) }
func (*PostOrderMsg) ProtoMessage()    {}
func (*PostOrderMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_492308ae36fa08c1, []int{5}
}
func (m *PostOrderMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostOrderMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostOrderMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostOrderMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostOrderMsg.Merge(m, src)
}
func (m *PostOrderMsg) XXX_Size() int {
	return m.Size()
}
func (m *PostOrderMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PostOrderMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PostOrderMsg proto.InternalMessageInfo

func (m *PostOrderMsg) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PostOrderMsg) GetOrderID() []byte {
	if m != nil {
		return m.OrderID
	}
	return nil
}

func (m *PostOrderMsg) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *PostOrderMsg) GetPrice() *Amount {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *PostOrderMsg) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_Invalid
}

func (m *PostOrderMsg) GetTimestamp() github_com_iov_one_weave.UnixTime {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type CancelOrderMsg struct {
	Metadata *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	OrderID  []byte          `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *CancelOrderMsg) Reset()         { *m = CancelOrderMsg{} }
func (m *CancelOrderMsg) String() string { return proto.CompactTextString(m) }
func (*CancelOrderMsg) ProtoMessage()    {}
func (*CancelOrderMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_492308ae36fa08c1, []int{6}
}
func (m *CancelOrderMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelOrderMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelOrderMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelOrderMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOrderMsg.Merge(m, src)
}
func (m *CancelOrderMsg) XXX_Size() int {
	return m.Size()
}
func (m *CancelOrderMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOrderMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOrderMsg proto.InternalMessageInfo

func (m *CancelOrderMsg) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CancelOrderMsg) GetOrderID() []byte {
	if m != nil {
		return m.OrderID
	}
	return nil
}

func init() {
	proto.RegisterEnum("orderbook.OrderState", OrderState_name, OrderState_value)
	proto.RegisterEnum("orderbook.Side", Side_name, Side_value)
	proto.RegisterType((*Amount)(nil), "orderbook.Amount")
	proto.RegisterType((*Order)(nil), "orderbook.Order")
	proto.RegisterType((*Trade)(nil), "orderbook.Trade")
	proto.RegisterType((*OrderBook)(nil), "orderbook.OrderBook")
	proto.RegisterType((*Market)(nil), "orderbook.Market")
	proto.RegisterType((*PostOrderMsg)(nil), "orderbook.PostOrderMsg")
	proto.RegisterType((*CancelOrderMsg)(nil), "orderbook.CancelOrderMsg")
}

func init() { proto.RegisterFile("x/orderbook/codec.proto", fileDescriptor_492308ae36fa08c1) }

var fileDescriptor_492308ae36fa08c1 = []byte{
	// 969 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x35, 0xf5, 0x49, 0x0d, 0x15, 0x4b, 0xdd, 0x26, 0x2d, 0x21, 0x20, 0xb2, 0xa2, 0xb8, 0xae,
	0x9d, 0xa2, 0x12, 0xe0, 0x02, 0x3d, 0xb6, 0xa0, 0x2c, 0x17, 0x60, 0x1a, 0xdb, 0x05, 0xa5, 0x26,
	0x47, 0x61, 0xa5, 0xdd, 0x2a, 0x0b, 0x89, 0x5c, 0x83, 0x5c, 0x3b, 0xfe, 0x0d, 0x3e, 0x14, 0x3d,
	0xf5, 0xe6, 0x3f, 0xd1, 0x5f, 0xd1, 0xa3, 0x8f, 0x3d, 0x09, 0x85, 0x7c, 0xef, 0xa5, 0xb7, 0x9c,
	0x0a, 0xce, 0x52, 0x94, 0x92, 0xd4, 0x89, 0x75, 0xc8, 0x6d, 0x35, 0xef, 0xcd, 0xe3, 0xcc, 0xec,
	0x1b, 0x52, 0xf0, 0xf9, 0x45, 0x5b, 0x86, 0x8c, 0x87, 0x43, 0x29, 0x27, 0xed, 0x91, 0x64, 0x7c,
	0xd4, 0x3a, 0x0d, 0xa5, 0x92, 0xa4, 0x94, 0x86, 0x6b, 0xdb, 0x63, 0xa1, 0x5e, 0x9e, 0x0d, 0x5b,
	0x23, 0xe9, 0xb7, 0x85, 0x3c, 0xff, 0x5a, 0x06, 0xbc, 0xfd, 0x8a, 0xd3, 0x73, 0xbe, 0x9a, 0x50,
	0xbb, 0x3f, 0x96, 0x63, 0x89, 0xc7, 0x76, 0x7c, 0xd2, 0xd1, 0xe6, 0x77, 0x50, 0x70, 0x7c, 0x79,
	0x16, 0x28, 0x72, 0x1f, 0xf2, 0xaf, 0x5e, 0xca, 0x29, 0xb7, 0x8d, 0x86, 0xb1, 0x9b, 0xf5, 0xf4,
	0x0f, 0x52, 0x07, 0xf8, 0x25, 0xa4, 0x23, 0x25, 0x64, 0x40, 0xa7, 0x76, 0x06, 0xa1, 0x95, 0x48,
	0xf3, 0xdf, 0x1c, 0xe4, 0x4f, 0xe2, 0x4a, 0xc8, 0x0e, 0x98, 0x58, 0xd2, 0x40, 0x30, 0x94, 0x28,
	0x77, 0xac, 0xf9, 0x6c, 0xab, 0x88, 0xa0, 0xdb, 0xf5, 0x8a, 0x08, 0xba, 0x8c, 0x7c, 0x0f, 0xa6,
	0x4f, 0x27, 0x9a, 0x97, 0x41, 0xde, 0xf6, 0xeb, 0xd9, 0x56, 0xe3, 0xb6, 0x1e, 0x5a, 0x0e, 0x63,
	0x21, 0x8f, 0x22, 0xaf, 0x88, 0x59, 0x2e, 0x23, 0x7b, 0x50, 0xf0, 0x69, 0x38, 0xe1, 0xca, 0xce,
	0x36, 0x8c, 0x5d, 0x6b, 0xff, 0x93, 0x56, 0x3a, 0x8a, 0xd6, 0x11, 0x02, 0x5e, 0x42, 0x20, 0x8f,
	0x21, 0x17, 0x09, 0xc6, 0xed, 0x5c, 0xc3, 0xd8, 0xdd, 0xdc, 0xaf, 0xac, 0x10, 0x7b, 0x82, 0x71,
	0x0f, 0x41, 0xf2, 0x2d, 0x58, 0xba, 0xf0, 0x48, 0x51, 0xc5, 0xed, 0x3c, 0x72, 0x1f, 0xac, 0x70,
	0xb1, 0x85, 0x5e, 0x0c, 0x7a, 0x20, 0xd3, 0x33, 0x79, 0x0c, 0xf7, 0x64, 0x28, 0xc6, 0x22, 0x18,
	0x9c, 0xcb, 0xe9, 0x99, 0xcf, 0xed, 0x02, 0x4e, 0xa7, 0xac, 0x83, 0xcf, 0x31, 0x46, 0xf6, 0xa0,
	0x1a, 0x72, 0x9f, 0x8a, 0x40, 0x04, 0xe3, 0x05, 0xaf, 0x88, 0xbc, 0x4a, 0x1a, 0x4f, 0xa8, 0x5f,
	0x42, 0x85, 0x5f, 0xf0, 0xd1, 0x99, 0xe2, 0x6c, 0xc1, 0x34, 0x91, 0xb9, 0xb9, 0x08, 0xa7, 0xc4,
	0xfc, 0x69, 0x28, 0x46, 0xdc, 0x2e, 0xbd, 0xd3, 0xbf, 0xbe, 0x4b, 0x4f, 0xe3, 0x64, 0x17, 0x0a,
	0x2a, 0xa4, 0x8c, 0x47, 0x36, 0x34, 0xb2, 0xbb, 0xd6, 0x7e, 0x75, 0x85, 0xd9, 0x8f, 0x01, 0x2f,
	0xc1, 0xc9, 0x23, 0x28, 0xeb, 0xd3, 0x60, 0x14, 0x0b, 0xd8, 0x16, 0x3e, 0xd8, 0xd2, 0xb1, 0x03,
	0xf4, 0x47, 0x17, 0x60, 0x14, 0x72, 0x1a, 0x57, 0x47, 0x95, 0x5d, 0x8e, 0x09, 0x9d, 0x2f, 0x5e,
	0xcf, 0xb6, 0x1e, 0xdd, 0x7a, 0x73, 0x3f, 0x07, 0xe2, 0xa2, 0x2f, 0x7c, 0xee, 0x95, 0x92, 0x44,
	0x07, 0x55, 0xce, 0x4e, 0xd9, 0x42, 0xe5, 0xde, 0x5a, 0x2a, 0x49, 0xa2, 0xa3, 0x9a, 0xd7, 0x59,
	0xc8, 0x63, 0x03, 0xe4, 0x2b, 0x30, 0x7d, 0xae, 0x28, 0xa3, 0x8a, 0xa2, 0xeb, 0xac, 0xfd, 0x4a,
	0x4b, 0xe7, 0x1d, 0x25, 0x61, 0x2f, 0x25, 0xc4, 0x16, 0xc5, 0x8e, 0x96, 0xd6, 0x43, 0x8b, 0xa2,
	0x92, 0xcb, 0xbc, 0xa2, 0xd2, 0x87, 0x75, 0x1c, 0xb6, 0x03, 0x79, 0xc4, 0xd0, 0x62, 0x6f, 0x4e,
	0x18, 0x6d, 0xe3, 0x69, 0x98, 0x3c, 0x05, 0x53, 0x2d, 0x5c, 0x9f, 0xc7, 0x47, 0xb7, 0xf1, 0xd1,
	0xda, 0xd3, 0x77, 0x5b, 0x00, 0x95, 0x2c, 0xc0, 0xd3, 0x95, 0x0d, 0x2a, 0x2c, 0xb5, 0x8e, 0xd6,
	0xd1, 0x5a, 0x2c, 0xd3, 0x67, 0x50, 0x78, 0xc3, 0x95, 0xc9, 0xaf, 0xa5, 0xc7, 0xcc, 0x0f, 0x78,
	0xec, 0x07, 0xb0, 0x52, 0xd7, 0x52, 0x85, 0x96, 0xbc, 0xf3, 0x8d, 0xc2, 0x22, 0xd3, 0x51, 0xcd,
	0x7f, 0x32, 0x50, 0xc2, 0x89, 0x75, 0xa4, 0x9c, 0xac, 0x77, 0xad, 0xfb, 0x50, 0x4e, 0xab, 0x5b,
	0x5e, 0x6d, 0x65, 0x3e, 0xdb, 0xb2, 0x52, 0x45, 0xb7, 0xeb, 0x59, 0x29, 0xe9, 0x23, 0xbc, 0x44,
	0xda, 0x00, 0x34, 0x9a, 0x0c, 0x10, 0x8b, 0xec, 0xfc, 0x3b, 0xeb, 0xa6, 0xcd, 0x50, 0xa2, 0xd1,
	0x04, 0x4f, 0x11, 0xd9, 0x81, 0x8a, 0x92, 0x8a, 0x4e, 0x07, 0x71, 0x9a, 0x5e, 0x3a, 0xfd, 0xfe,
	0xb8, 0x87, 0x61, 0x27, 0x9a, 0xe8, 0xb5, 0x6b, 0x03, 0x0c, 0x05, 0x5b, 0x08, 0x17, 0x6f, 0x13,
	0x1e, 0x0a, 0xf6, 0xb6, 0x70, 0x9c, 0xa6, 0x85, 0xcd, 0x15, 0xe1, 0x8e, 0x60, 0x28, 0xdc, 0xfc,
	0xc3, 0x80, 0x82, 0xee, 0x74, 0xbd, 0x69, 0xef, 0x41, 0x49, 0x0f, 0x66, 0x39, 0xea, 0xf2, 0x7c,
	0xb6, 0x65, 0x6a, 0x2d, 0xb7, 0xeb, 0x99, 0x1a, 0x76, 0x19, 0x21, 0x90, 0x0b, 0xa8, 0xcf, 0x71,
	0xc4, 0x25, 0x0f, 0xcf, 0xe4, 0xa1, 0x1e, 0x94, 0x12, 0xa3, 0x49, 0xb2, 0x35, 0x25, 0x1c, 0x4b,
	0x1f, 0x03, 0x31, 0x1c, 0xd7, 0x9d, 0xc0, 0x79, 0x0d, 0x0f, 0x05, 0xd3, 0x70, 0xf3, 0xd7, 0x0c,
	0x94, 0x7f, 0x92, 0x91, 0xc2, 0x5e, 0x8f, 0xa2, 0xf1, 0xda, 0xfb, 0x9f, 0x7e, 0xa2, 0x32, 0xef,
	0xf9, 0x44, 0x2d, 0x97, 0x22, 0xfb, 0xff, 0x4b, 0x91, 0xfb, 0xc0, 0x52, 0x2c, 0x2c, 0x93, 0x7f,
	0x9f, 0x65, 0x0e, 0xa0, 0xa4, 0x84, 0xcf, 0x23, 0x45, 0xfd, 0x53, 0x7d, 0xf7, 0x77, 0x7e, 0x13,
	0xa6, 0x79, 0x4d, 0x0e, 0x9b, 0x07, 0x34, 0x18, 0xf1, 0xe9, 0x47, 0x9d, 0xc8, 0x93, 0xdf, 0x0d,
	0x80, 0xe5, 0x67, 0x90, 0x6c, 0xc3, 0xa7, 0x27, 0x5e, 0xf7, 0xd0, 0x1b, 0xf4, 0xfa, 0x4e, 0xff,
	0x70, 0xe0, 0x1e, 0x3f, 0x77, 0x9e, 0xb9, 0xdd, 0xea, 0x46, 0xcd, 0xba, 0xbc, 0x6a, 0x14, 0xdd,
	0xe0, 0x9c, 0x4e, 0x05, 0x23, 0x75, 0xa8, 0xae, 0xb2, 0x5e, 0x38, 0x6e, 0xbf, 0x6a, 0xd4, 0xcc,
	0xcb, 0xab, 0x46, 0xee, 0x05, 0x15, 0xea, 0x6d, 0xbc, 0x7b, 0x72, 0x7c, 0x58, 0xcd, 0x68, 0xbc,
	0x2b, 0x03, 0x4e, 0x9a, 0x40, 0x56, 0xf1, 0x03, 0xe7, 0xf8, 0xe0, 0xf0, 0x59, 0x35, 0x5b, 0x83,
	0xcb, 0xab, 0x46, 0x41, 0x77, 0xfd, 0xa4, 0x07, 0xb9, 0x78, 0xa4, 0xe4, 0x21, 0x94, 0x7b, 0x6e,
	0xf7, 0xd6, 0x52, 0x1e, 0x80, 0x89, 0xb0, 0xd3, 0xfb, 0xb1, 0x6a, 0xd4, 0x8a, 0x97, 0x57, 0x8d,
	0xac, 0x13, 0x4d, 0xd2, 0x70, 0xc7, 0xed, 0x56, 0x33, 0x3a, 0xdc, 0x11, 0xac, 0x63, 0xff, 0x39,
	0xaf, 0x1b, 0xd7, 0xf3, 0xba, 0xf1, 0xf7, 0xbc, 0x6e, 0xfc, 0x76, 0x53, 0xdf, 0xb8, 0xbe, 0xa9,
	0x6f, 0xfc, 0x75, 0x53, 0xdf, 0x18, 0x16, 0xf0, 0x5f, 0xd3, 0x37, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x8b, 0x36, 0xa3, 0xa9, 0x97, 0x09, 0x00, 0x00,
}

func (m *Amount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Amount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Whole != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Whole))
	}
	if m.Fractional != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Fractional))
	}
	return i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.OrderID)))
		i += copy(dAtA[i:], m.OrderID)
	}
	if len(m.MakerId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.MakerId)))
		i += copy(dAtA[i:], m.MakerId)
	}
	if m.Market != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Market.Size()))
		n1, err := m.Market.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Side != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Side))
	}
	if m.OrderState != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.OrderState))
	}
	if m.OriginVolume != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.OriginVolume))
	}
	if m.RemainingVolume != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.RemainingVolume))
	}
	if m.ExecutedVolume != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ExecutedVolume))
	}
	if m.Price != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Price.Size()))
		n2, err := m.Price.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Trades) > 0 {
		for _, msg := range m.Trades {
			dAtA[i] = 0x52
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TradesCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.TradesCount))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdatedAt))
	}
	return i, nil
}

func (m *Trade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trade) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n3, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.TradeId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.TradeId)))
		i += copy(dAtA[i:], m.TradeId)
	}
	if m.Market != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Market.Size()))
		n4, err := m.Market.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Order != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Order.Size()))
		n5, err := m.Order.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.TakerId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.TakerId)))
		i += copy(dAtA[i:], m.TakerId)
	}
	if len(m.MakerId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.MakerId)))
		i += copy(dAtA[i:], m.MakerId)
	}
	if m.Volume != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Volume))
	}
	if m.Price != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Price.Size()))
		n6, err := m.Price.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ExecutedAt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ExecutedAt))
	}
	return i, nil
}

func (m *OrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBook) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n7, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.OrderBookID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.OrderBookID)))
		i += copy(dAtA[i:], m.OrderBookID)
	}
	if m.Market != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Market.Size()))
		n8, err := m.Market.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Side != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Side))
	}
	if len(m.AskOrders) > 0 {
		for _, msg := range m.AskOrders {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalAskCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.TotalAskCount))
	}
	if len(m.BidOrders) > 0 {
		for _, msg := range m.BidOrders {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalBidCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.TotalBidCount))
	}
	return i, nil
}

func (m *Market) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Market) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n9, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.MarketID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.MarketID)))
		i += copy(dAtA[i:], m.MarketID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.AskTicker) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.AskTicker)))
		i += copy(dAtA[i:], m.AskTicker)
	}
	if len(m.BidTicker) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.BidTicker)))
		i += copy(dAtA[i:], m.BidTicker)
	}
	return i, nil
}

func (m *PostOrderMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostOrderMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n10, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.OrderID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.OrderID)))
		i += copy(dAtA[i:], m.OrderID)
	}
	if m.Volume != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Volume))
	}
	if m.Price != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Price.Size()))
		n11, err := m.Price.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Side != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Side))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *CancelOrderMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelOrderMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n12, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.OrderID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.OrderID)))
		i += copy(dAtA[i:], m.OrderID)
	}
	return i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Amount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Whole != 0 {
		n += 1 + sovCodec(uint64(m.Whole))
	}
	if m.Fractional != 0 {
		n += 1 + sovCodec(uint64(m.Fractional))
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.MakerId)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Side != 0 {
		n += 1 + sovCodec(uint64(m.Side))
	}
	if m.OrderState != 0 {
		n += 1 + sovCodec(uint64(m.OrderState))
	}
	if m.OriginVolume != 0 {
		n += 1 + sovCodec(uint64(m.OriginVolume))
	}
	if m.RemainingVolume != 0 {
		n += 1 + sovCodec(uint64(m.RemainingVolume))
	}
	if m.ExecutedVolume != 0 {
		n += 1 + sovCodec(uint64(m.ExecutedVolume))
	}
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if len(m.Trades) > 0 {
		for _, e := range m.Trades {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.TradesCount != 0 {
		n += 1 + sovCodec(uint64(m.TradesCount))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovCodec(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovCodec(uint64(m.UpdatedAt))
	}
	return n
}

func (m *Trade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.TradeId)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.TakerId)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.MakerId)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Volume != 0 {
		n += 1 + sovCodec(uint64(m.Volume))
	}
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.ExecutedAt != 0 {
		n += 1 + sovCodec(uint64(m.ExecutedAt))
	}
	return n
}

func (m *OrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.OrderBookID)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Side != 0 {
		n += 1 + sovCodec(uint64(m.Side))
	}
	if len(m.AskOrders) > 0 {
		for _, e := range m.AskOrders {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.TotalAskCount != 0 {
		n += 1 + sovCodec(uint64(m.TotalAskCount))
	}
	if len(m.BidOrders) > 0 {
		for _, e := range m.BidOrders {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.TotalBidCount != 0 {
		n += 1 + sovCodec(uint64(m.TotalBidCount))
	}
	return n
}

func (m *Market) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.MarketID)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.AskTicker)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.BidTicker)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *PostOrderMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Volume != 0 {
		n += 1 + sovCodec(uint64(m.Volume))
	}
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Side != 0 {
		n += 1 + sovCodec(uint64(m.Side))
	}
	if m.Timestamp != 0 {
		n += 1 + sovCodec(uint64(m.Timestamp))
	}
	return n
}

func (m *CancelOrderMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Amount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whole", wireType)
			}
			m.Whole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whole |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fractional", wireType)
			}
			m.Fractional = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fractional |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = append(m.OrderID[:0], dAtA[iNdEx:postIndex]...)
			if m.OrderID == nil {
				m.OrderID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerId = append(m.MakerId[:0], dAtA[iNdEx:postIndex]...)
			if m.MakerId == nil {
				m.MakerId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &Market{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= Side(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderState", wireType)
			}
			m.OrderState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderState |= OrderState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginVolume", wireType)
			}
			m.OriginVolume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginVolume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingVolume", wireType)
			}
			m.RemainingVolume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingVolume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedVolume", wireType)
			}
			m.ExecutedVolume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutedVolume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Price == nil {
				m.Price = &Amount{}
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trades = append(m.Trades, &Trade{})
			if err := m.Trades[len(m.Trades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradesCount", wireType)
			}
			m.TradesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradesCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= github_com_iov_one_weave.UnixTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= github_com_iov_one_weave.UnixTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeId = append(m.TradeId[:0], dAtA[iNdEx:postIndex]...)
			if m.TradeId == nil {
				m.TradeId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &Market{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerId = append(m.TakerId[:0], dAtA[iNdEx:postIndex]...)
			if m.TakerId == nil {
				m.TakerId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerId = append(m.MakerId[:0], dAtA[iNdEx:postIndex]...)
			if m.MakerId == nil {
				m.MakerId = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Price == nil {
				m.Price = &Amount{}
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			m.ExecutedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutedAt |= github_com_iov_one_weave.UnixTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBookID = append(m.OrderBookID[:0], dAtA[iNdEx:postIndex]...)
			if m.OrderBookID == nil {
				m.OrderBookID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &Market{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= Side(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AskOrders = append(m.AskOrders, &Order{})
			if err := m.AskOrders[len(m.AskOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAskCount", wireType)
			}
			m.TotalAskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAskCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidOrders = append(m.BidOrders, &Order{})
			if err := m.BidOrders[len(m.BidOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBidCount", wireType)
			}
			m.TotalBidCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBidCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Market) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Market: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Market: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketID = append(m.MarketID[:0], dAtA[iNdEx:postIndex]...)
			if m.MarketID == nil {
				m.MarketID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AskTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostOrderMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostOrderMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostOrderMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = append(m.OrderID[:0], dAtA[iNdEx:postIndex]...)
			if m.OrderID == nil {
				m.OrderID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Price == nil {
				m.Price = &Amount{}
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= Side(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= github_com_iov_one_weave.UnixTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelOrderMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelOrderMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelOrderMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = append(m.OrderID[:0], dAtA[iNdEx:postIndex]...)
			if m.OrderID == nil {
				m.OrderID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
