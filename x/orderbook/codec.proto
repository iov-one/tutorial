syntax = "proto3";

package orderbook;

import "extern/github.com/iov-one/weave/codec.proto";
import "gogoproto/gogo.proto";

//------------------- STATE -------------------

message Coin {
  // Whole coins, -10^15 < integer < 10^15
  int64 whole = 1;
  // Billionth of coins. 0 <= abs(fractional) < 10^9
  // If fractional != 0, must have same sign as integer
  int64 fractional = 2;
}

enum OrderState {
  ORDER_STATE_INVALID = 0 [(gogoproto.enumvalue_customname) = "Invalid"];
  ORDER_STATE_WAIT = 1 [(gogoproto.enumvalue_customname) = "Wait"];
  ORDER_STATE_DONE = 2 [(gogoproto.enumvalue_customname) = "Done"];
  ORDER_STATE_CANCEL = 3 [(gogoproto.enumvalue_customname) = "Cancel"];
}

enum Side {
  SIDE_INVALID = 0 [(gogoproto.enumvalue_customname) = "Invalid"];
  SIDE_ASK = 1 [(gogoproto.enumvalue_customname) = "Ask"];
  SIDE_BID = 2 [(gogoproto.enumvalue_customname) = "Bid"];
}

message Order {
  // Unique identifier of order
  bytes order_id = 1 [(gogoproto.customname) = "OrderID"];
  // Unique identifier of maker that created order
  bytes maker_id = 2 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
  Market market = 3;
  Side side = 4;
  OrderState order_state = 5;
  // The amount maker want to sell/buy
  int64 origin_volume = 6;
  // Remaning volume. (This part enables partially filled orders)
  int64 remaining_volume = 7;
  // Executed (Fullfiled) volume. origin_volume = executed_volume + remaining_volume
  int64 executed_volume = 8;
  // Price for each unit
  Coin coin_price = 9;
  // Executed trades
  repeated Trade trades = 10;
  // Count of executed trade
  int64 trades_count = 11;
  // created_at defines create time of an order
  int64 created_at = 12 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixTime"];
  // updated_at defines update time of an order
  int64 updated_at = 13 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixTime"];
}

// Trade is a settled partial/full order
message Trade {
  weave.Metadata metadata = 1;
  bytes trade_id = 2 [(gogoproto.customname) = "TradeId"];
  Market market = 3;
  Order order = 4;
  // Unique identifier of taker
  bytes taker_id = 5 [
    (gogoproto.casttype) = "github.com/iov-one/weave.Address",
    (gogoproto.customname) = "TakerId"
  ];
  // Unique identifier of maker
  bytes maker_id = 6 [
    (gogoproto.casttype) = "github.com/iov-one/weave.Address",
    (gogoproto.customname) = "MakerId"
  ];
  int64 volume = 7;
  Coin coin_price = 8;
  // executed_at defines execution time of an order
  int64 executed_at = 9 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixTime"];
}

message OrderBook {
  weave.Metadata metadata = 1;
  // Unique identifier of orderbook
  bytes orderbook_id = 2 [(gogoproto.customname) = "OrderBookID"];
  Market market = 3;
  Side side = 4;
  repeated Order ask_orders = 5;
  int64 total_ask_count = 6;
  repeated Order bid_orders = 7;
  int64 total_bid_count = 8;
}

message Market {
  weave.Metadata metadata = 1;
  bytes market_id = 2 [(gogoproto.customname) = "MarketID"];
  // Market name
  string name = 3;
  string ask_unit = 4;
  string bid_unit = 5;
  // TODO add fee design
  // TODO add min and max amount
  // TODO add precision

}

//------------------- STATE -------------------

message PostOrderMsg {
  weave.Metadata metadata = 1;
  bytes order_id = 2 [(gogoproto.customname) = "OrderID"];
  int64 volume = 3;
  Coin coin_price = 4;
  Side side = 5;
  int64 timestamp = 6 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixTime"];
}

message CancelOrderMsg {
  weave.Metadata metadata = 1;
  bytes order_id = 2 [(gogoproto.customname) = "OrderID"];
}
